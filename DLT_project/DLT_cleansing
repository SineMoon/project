import pandas as pd
from datetime import datetime
import pytz

# Read the stored timestamp from the first cell (from slide 16)
with open("/dbfs/tmp/current_time.txt", "r") as f:
    current_time = f.read().strip()

# Define filenames based on the shared timestamp
original_filename = f"DLT_Raw_data_{current_time}.xlsx"
adjusted_filename = f"DLT_Raw_data_{current_time}_Adjusted.xlsx"

# Define file paths
input_path = f"/Workspace/Users/H-020-IT/{original_filename}"
output_path = f"/Workspace/Users/H-020-IT/{adjusted_filename}"

# Thai month mapping (from slide 20)
thai_month_map = {
    "January": "มกราคม", "February": "กุมภาพันธ์", "March": "มีนาคม", "April": "เมษายน",
    "May": "พฤษภาคม", "June": "มิถุนายน", "July": "กรกฎาคม", "August": "สิงหาคม",
    "September": "กันยายน", "October": "ตุลาคม", "November": "พฤศจิกายน", "December": "ธันวาคม"
}

# Function to get the Thai month name for a given month index
def get_thai_month_name(month_index):
    english_month_name = datetime(1900, month_index, 1).strftime("%B")
    return thai_month_map[english_month_name]

# Dynamic Month and Year Filtering Logic (from slide 21)
timezone = pytz.timezone('Asia/Bangkok')
current_date = datetime.now(timezone)
previous_month = current_date.month - 1 if current_date.month > 1 else 12
previous_year = current_date.year if current_date.month > 1 else current_date.year - 1

# Get the Thai name of the previous month
thai_months = list(thai_month_map.values())
previous_month_name_thai = thai_months[previous_month - 1]

# Filter by month, year, and valid sections
valid_sections = [str(s) for s in [1, 2, 3, 4, 6, 8, 9, 10, 11]]

# Load and process the data
try:
    # Read Excel file
    df = pd.read_excel(input_path)
    
    # Filter by month, year, and valid sections (from slide 21)
    df_filtered = df[
        (df["Month"] == previous_month_name_thai) & 
        (df["Year"] == previous_year) & 
        (df["Section"].isin(valid_sections))
    ]
    
    # Extract section from 'Section' column using regex (from slide 22)
    import re
    def extract_section(section):
        match = re.search(r"ข\.\s*(\d+)", section)
        return match.group(1) if match else None
    
    # Apply the section extraction
    df_filtered = df_filtered.withColumn('Extracted_Section', extract_section(df_filtered['Section']))
    
    # Drop unnecessary columns (from slide 23)
    df_transformed = df_filtered.drop(columns=['ที่สวท', 'จังหวัด'])
    
    # Rename columns to English (from slide 23)
    df_transformed = df_transformed.rename(columns={
        'ปี': 'Year', 'เดือน': 'Month', 'ประเภทรถ': 'Section',
        'ยี่ห้อรถ': 'Brand', 'รุ่นรถ': 'Model', 'จำนวนคัน': 'Units'
    })
    
    # Ensure 'Units' column is integer
    df_transformed['Units'] = df_transformed['Units'].astype(int)
    
    # Group by relevant columns and sum 'Units' (from slide 23)
    df_grouped = df_transformed.groupby(
        ['Year', 'Month', 'Section', 'Brand', 'Model'], as_index=False
    )['Units'].sum()
    
    # Sort by 'Brand' and 'Model'
    df_grouped_order = df_grouped.sort_values(by=['Brand', 'Model'])
    
    # Display and save the grouped data
    print(f"Processed {len(df_grouped_order)} records")
    
    # Save to Excel
    output_excel_path = f"/Workspace/Users/H-020-IT/DLT/Grouped_DLT_Data_{current_time}.xlsx"
    df_grouped_order.to_excel(output_excel_path, index=False)
    
    print(f"Cleaned and grouped data saved at: {output_excel_path}")
    
except Exception as e:
    print(f"Error processing data: {e}")

# Handle missing values in Units (from slide 25)
df_transformed['Units'] = df_transformed['Units'].fillna(0)

# Flag missing Price_Range_THB (from slide 25)
df_transformed['Price_Range_THB'] = df_transformed['Price_Range_THB'].fillna('Add')

print("Data processing completed successfully!")
